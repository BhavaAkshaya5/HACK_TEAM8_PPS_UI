# -*- coding: utf-8 -*-
"""Hack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xu6kPHXiuw9onGM1Hoj7SffP-U31K13J
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import pickle

sc=pd.read_csv('/content/Final Exam Score (1).csv')

sc.head()

sc.isnull().sum()

sc.dropna(inplace=True)

sc.isnull().sum()

sc.info()

from sklearn.preprocessing import LabelEncoder
x=LabelEncoder()
sc['Enter_Your_Name']=x.fit_transform(sc['Enter Your Name'])

x1=LabelEncoder()
sc['Usage of mobile phone while studying']=x.fit_transform(sc['Usage of mobile phone while studying'])

x2=LabelEncoder()
sc['Participation in doubt sessions']=x.fit_transform(sc['Participation in doubt sessions'])

sc.tail()

LR=LinearRegression()

# Clean percentage column
sc['Percentage of Attendance'] = sc['Percentage of Attendance'].str.replace('%', '').astype(float)

# Define input and output variables
ind = sc[['Enter_Your_Name', 'What is the dialy hours of study?', 'Usage of mobile phone while studying',
          'Sleep Hours before exam?', 'Percentage of Attendance', 'Participation in doubt sessions']]
dep = sc['Final Score']

# Fit the model
LR.fit(ind, dep)

with open('/content/Final_scorepickle.pkl','wb') as f:
  pickle.dump(LR,f)
print("model trained and saved as 'Final_Score.pkl'")

LR.predict([[25,5,3,8,80,1]])

from sklearn.metrics import mean_squared_error
val=LR.predict(ind)
# Use a regression metric like mean_squared_error
# You can choose other regression metrics like mean_absolute_error or r2_score
mse = mean_squared_error(dep, val)
print(f"Mean Squared Error: {mse}")

n=int(input("Enter_Your_Name"))
hr=int(input("What is the dialy hours of study?"))
mo=int(input("Usage of mobile phone while studying"))
sl=int(input("Sleep Hours before exam?"))
at=int(input("Percentage of Attendance"))
d=int(input("Participation in doubt sessions"))

ans=LR.predict([[n,hr,mo,sl,at,d]])
ans

import joblib
joblib.dump(LR, 'model.pkl')

import streamlit as st
import pandas as pd
import joblib

# Load your trained model
model = joblib.load("model.pkl")  # Make sure model.pkl exists in the same folder

# Page configuration
st.set_page_config(
    page_title="🎓 Final Score Predictor",
    layout="centered",
    initial_sidebar_state="auto"
)

# Background and style
st.markdown("""
    <style>
    body {
        background-image: url("https://images.unsplash.com/photo-1557683316-973673baf926");
        background-size: cover;
    }
    .main {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
    }
    .stButton > button {
        background-color: #0077b6;
        color: white;
        border-radius: 10px;
        padding: 0.5em 2em;
        font-weight: bold;
        transition: 0.3s;
    }
    .stButton > button:hover {
        background-color: #023e8a;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# UI Container
with st.container():
    st.markdown("<div class='main'>", unsafe_allow_html=True)

    st.title("🎓 Student Final Score Predictor")
    st.markdown("🔍 _Predict your academic performance based on study habits_")

    # Input widgets
    study_hours = st.slider("📚 Daily Study Hours", 0, 15, 2)
    mobile_usage = st.slider("📱 Mobile Usage While Studying (hrs)", 0, 10, 1)
    sleep_hours = st.slider("😴 Sleep Hours Before Exam", 0, 12, 6)
    attendance = st.text_input("📅 Attendance Percentage (e.g., 90%)", "90%")
    doubt_session = st.selectbox("❓ Participation in Doubt Sessions?", ["Yes", "No"])

    # Handle and clean inputs
    try:
        attendance = float(attendance.strip('%'))
        doubt_encoded = 1 if doubt_session == "Yes" else 0

        input_data = pd.DataFrame([[
            study_hours, mobile_usage, sleep_hours, attendance, doubt_encoded
        ]], columns=[
            'What is the dialy hours of study?',
            'Usage of mobile phone while studying',
            'Sleep Hours before exam?',
            'Percentage of Attendance',
            'Participation in doubt sessions'
        ])

        if st.button("🎯 Predict Final Score"):
            score = model.predict(input_data)[0]
            st.success(f"✅ Your Predicted Final Score is: **{score:.2f}**")
    except ValueError:
        st.error("⚠️ Please enter a valid number for attendance.")

    st.markdown("</div>", unsafe_allow_html=True)